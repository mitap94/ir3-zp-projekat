package gui;

import java.security.KeyPair;

import java.awt.*;
import crypto.CertManager;
import crypto.KeyContainer;
import java.io.File;
import java.io.IOException;
import static java.lang.System.exit;
import java.security.InvalidParameterException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Mita
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow(CertManager manager) {
        initComponents();
        myInitComponents();

        this.manager = manager;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabsPanel = new javax.swing.JTabbedPane();
        certificateGenerationTab = new javax.swing.JPanel();
        generatedKeysLabel = new javax.swing.JLabel();
        importExportPanel = new javax.swing.JPanel();
        importButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        keyGenerationPanel = new javax.swing.JPanel();
        saveKeyButton = new javax.swing.JButton();
        publicKeyTextField = new javax.swing.JTextField();
        generateKeysButton = new javax.swing.JButton();
        privateKeyTextField = new javax.swing.JTextField();
        publicKeyLabel = new javax.swing.JLabel();
        keyNameLabel = new javax.swing.JLabel();
        keyNameTextField = new javax.swing.JTextField();
        privateKeyLabel = new javax.swing.JLabel();
        keySizeTextField = new javax.swing.JTextField();
        keySizeLabel = new javax.swing.JLabel();
        certificateVersionLabel = new javax.swing.JLabel();
        certificateVersionLabel1 = new javax.swing.JLabel();
        serialNumberLabel = new javax.swing.JLabel();
        serialNumberTextField = new javax.swing.JTextField();
        keyGenerationSeparator = new javax.swing.JSeparator();
        dateLabel = new javax.swing.JLabel();
        datePanel = new javax.swing.JPanel();
        dateNotBeforeLabel = new javax.swing.JLabel();
        dateNotAfterLabel = new javax.swing.JLabel();
        dateNotBeforeTextField = new javax.swing.JFormattedTextField();
        dateNotAfterTextField = new javax.swing.JFormattedTextField();
        dateFormatLabel = new javax.swing.JLabel();
        keyGenerationSeparator1 = new javax.swing.JSeparator();
        commonNameLabel = new javax.swing.JLabel();
        commonNameTextField = new javax.swing.JTextField();
        organizationNameLabel = new javax.swing.JLabel();
        organizationNameTextField = new javax.swing.JTextField();
        organizationalUnitNameLabel = new javax.swing.JLabel();
        organizationalUnitNameTextField = new javax.swing.JTextField();
        localityTextField = new javax.swing.JTextField();
        localityLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        countryLabel = new javax.swing.JLabel();
        keyGenerationSeparator2 = new javax.swing.JSeparator();
        countryTextField = new javax.swing.JTextField();
        stateLabel = new javax.swing.JLabel();
        stateTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        extensionsLabel = new javax.swing.JLabel();
        extensionsCheckBox = new javax.swing.JCheckBox();
        extensionsPanel = new javax.swing.JPanel();
        keyGenerationLabel = new javax.swing.JLabel();
        generatedKeysScrollPanel = new javax.swing.JScrollPane();
        generatedKeysList = new javax.swing.JList<>();
        certificateSigningTab = new javax.swing.JPanel();
        statusBarTextField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(" x.509 CertManager");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(880, 640));
        setName("Window"); // NOI18N
        setSize(new java.awt.Dimension(800, 640));

        tabsPanel.setMinimumSize(new java.awt.Dimension(795, 560));
        tabsPanel.setName("tabsPanel"); // NOI18N
        tabsPanel.setPreferredSize(new java.awt.Dimension(795, 560));

        certificateGenerationTab.setMinimumSize(new java.awt.Dimension(790, 532));
        certificateGenerationTab.setPreferredSize(new java.awt.Dimension(790, 532));

        generatedKeysLabel.setLabelFor(generatedKeysScrollPanel);
        generatedKeysLabel.setText("Generated keys");

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout importExportPanelLayout = new javax.swing.GroupLayout(importExportPanel);
        importExportPanel.setLayout(importExportPanelLayout);
        importExportPanelLayout.setHorizontalGroup(
            importExportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(importExportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(importButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exportButton)
                .addContainerGap())
        );
        importExportPanelLayout.setVerticalGroup(
            importExportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(importExportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(importExportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportButton)
                    .addComponent(importButton))
                .addContainerGap())
        );

        keyGenerationPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        saveKeyButton.setText("Save Certificate");
        saveKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveKeyButtonActionPerformed(evt);
            }
        });

        publicKeyTextField.setEditable(false);
        publicKeyTextField.setBackground(new java.awt.Color(245, 245, 245));
        publicKeyTextField.setForeground(new java.awt.Color(102, 102, 102));
        publicKeyTextField.setDisabledTextColor(new java.awt.Color(102, 102, 102));

        generateKeysButton.setText("Generate Key Pair");
        generateKeysButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateKeysButtonActionPerformed(evt);
            }
        });

        privateKeyTextField.setEditable(false);
        privateKeyTextField.setBackground(new java.awt.Color(245, 245, 245));
        privateKeyTextField.setForeground(new java.awt.Color(102, 102, 102));
        privateKeyTextField.setDisabledTextColor(new java.awt.Color(102, 102, 102));

        publicKeyLabel.setLabelFor(publicKeyTextField);
        publicKeyLabel.setText("Public key:");

        keyNameLabel.setLabelFor(keyNameTextField);
        keyNameLabel.setText("Key name:");

        keyNameTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        privateKeyLabel.setLabelFor(privateKeyTextField);
        privateKeyLabel.setText("Private key:");

        keySizeTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        keySizeLabel.setLabelFor(keySizeTextField);
        keySizeLabel.setText("Key size:");

        certificateVersionLabel.setLabelFor(certificateVersionLabel1);
        certificateVersionLabel.setText("Certificate version:");

        certificateVersionLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        certificateVersionLabel1.setText("v3");

        serialNumberLabel.setLabelFor(serialNumberTextField);
        serialNumberLabel.setText("Serial number:");

        dateLabel.setLabelFor(datePanel);
        dateLabel.setText("Validity date and time");

        datePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        dateNotBeforeLabel.setLabelFor(dateNotBeforeTextField);
        dateNotBeforeLabel.setText("Not before:");

        dateNotAfterLabel.setLabelFor(dateNotAfterTextField);
        dateNotAfterLabel.setText("Not after:");

        dateNotBeforeTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy hh:mm:ss"))));

        dateNotAfterTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy hh:mm:ss"))));

        javax.swing.GroupLayout datePanelLayout = new javax.swing.GroupLayout(datePanel);
        datePanel.setLayout(datePanelLayout);
        datePanelLayout.setHorizontalGroup(
            datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateNotBeforeLabel)
                    .addComponent(dateNotAfterLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateNotBeforeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateNotAfterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        datePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dateNotAfterTextField, dateNotBeforeTextField});

        datePanelLayout.setVerticalGroup(
            datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateNotBeforeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateNotBeforeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateNotAfterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateNotAfterLabel))
                .addContainerGap())
        );

        datePanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dateNotAfterTextField, dateNotBeforeTextField});

        dateFormatLabel.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        dateFormatLabel.setForeground(new java.awt.Color(51, 51, 51));
        dateFormatLabel.setLabelFor(datePanel);
        dateFormatLabel.setText("(dd/mm/yyyy hh:mm:ss)");

        commonNameLabel.setLabelFor(commonNameTextField);
        commonNameLabel.setText("Common name:");

        organizationNameLabel.setLabelFor(organizationNameTextField);
        organizationNameLabel.setText("Organization:");

        organizationalUnitNameLabel.setLabelFor(organizationalUnitNameTextField);
        organizationalUnitNameLabel.setText("Organizational unit:");

        localityLabel.setLabelFor(localityTextField);
        localityLabel.setText("Locality:");

        emailLabel.setLabelFor(emailTextField);
        emailLabel.setText("E-mail:");

        countryLabel.setLabelFor(countryTextField);
        countryLabel.setText("Country:");

        stateLabel.setLabelFor(stateTextField);
        stateLabel.setText("State:");

        extensionsLabel.setLabelFor(extensionsCheckBox);
        extensionsLabel.setText("Extensions:");

        extensionsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extensionsCheckBoxActionPerformed(evt);
            }
        });

        extensionsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout extensionsPanelLayout = new javax.swing.GroupLayout(extensionsPanel);
        extensionsPanel.setLayout(extensionsPanelLayout);
        extensionsPanelLayout.setHorizontalGroup(
            extensionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 382, Short.MAX_VALUE)
        );
        extensionsPanelLayout.setVerticalGroup(
            extensionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 92, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout keyGenerationPanelLayout = new javax.swing.GroupLayout(keyGenerationPanel);
        keyGenerationPanel.setLayout(keyGenerationPanelLayout);
        keyGenerationPanelLayout.setHorizontalGroup(
            keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(keyGenerationSeparator1)
                    .addComponent(keyGenerationSeparator2))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, keyGenerationPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(keyGenerationSeparator)
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyGenerationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saveKeyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(certificateVersionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(certificateVersionLabel1)
                .addGap(10, 10, 10))
            .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(keySizeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(keyNameLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(keyNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(keySizeTextField))
                .addGap(88, 88, 88)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(privateKeyLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(publicKeyLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(3, 3, 3)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(privateKeyTextField)
                    .addComponent(publicKeyTextField))
                .addContainerGap())
            .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(datePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(commonNameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(organizationalUnitNameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(countryLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(localityLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(localityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(countryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(organizationalUnitNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(commonNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(dateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateFormatLabel))
                    .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(generateKeysButton)))
                .addGap(35, 35, 35)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(extensionsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(stateLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(emailLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(organizationNameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(serialNumberLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(extensionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extensionsCheckBox)
                    .addComponent(stateTextField)
                    .addComponent(emailTextField)
                    .addComponent(organizationNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                    .addComponent(serialNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        keyGenerationPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {commonNameTextField, countryTextField, organizationalUnitNameTextField});

        keyGenerationPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {emailTextField, organizationNameTextField, serialNumberTextField, stateTextField});

        keyGenerationPanelLayout.setVerticalGroup(
            keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyNameLabel)
                    .addComponent(publicKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(publicKeyLabel))
                .addGap(12, 12, 12)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keySizeLabel)
                    .addComponent(keySizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(privateKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(privateKeyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(generateKeysButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyGenerationSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel)
                    .addComponent(dateFormatLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(datePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyGenerationPanelLayout.createSequentialGroup()
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(serialNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serialNumberLabel))
                        .addGap(42, 42, 42)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyGenerationSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyGenerationPanelLayout.createSequentialGroup()
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(commonNameLabel)
                            .addComponent(commonNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(organizationalUnitNameLabel)
                            .addComponent(organizationalUnitNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyGenerationPanelLayout.createSequentialGroup()
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(organizationNameLabel)
                            .addComponent(organizationNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emailLabel)
                            .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyGenerationSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(countryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(countryLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(stateLabel)
                        .addComponent(stateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localityLabel)
                    .addComponent(extensionsLabel)
                    .addComponent(extensionsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyGenerationPanelLayout.createSequentialGroup()
                        .addComponent(extensionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(certificateVersionLabel)
                            .addComponent(certificateVersionLabel1)))
                    .addComponent(saveKeyButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        keyGenerationPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {commonNameTextField, countryTextField, emailTextField, localityTextField, organizationNameTextField, organizationalUnitNameTextField, serialNumberTextField, stateTextField});

        keyGenerationLabel.setText("Certificate information");

        generatedKeysList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        generatedKeysList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        generatedKeysScrollPanel.setViewportView(generatedKeysList);

        javax.swing.GroupLayout certificateGenerationTabLayout = new javax.swing.GroupLayout(certificateGenerationTab);
        certificateGenerationTab.setLayout(certificateGenerationTabLayout);
        certificateGenerationTabLayout.setHorizontalGroup(
            certificateGenerationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, certificateGenerationTabLayout.createSequentialGroup()
                .addGroup(certificateGenerationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(certificateGenerationTabLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(keyGenerationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 893, Short.MAX_VALUE))
                    .addGroup(certificateGenerationTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(keyGenerationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(certificateGenerationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(importExportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generatedKeysScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, certificateGenerationTabLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(generatedKeysLabel)
                .addGap(103, 103, 103))
        );
        certificateGenerationTabLayout.setVerticalGroup(
            certificateGenerationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(certificateGenerationTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(certificateGenerationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyGenerationLabel)
                    .addComponent(generatedKeysLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(certificateGenerationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(certificateGenerationTabLayout.createSequentialGroup()
                        .addComponent(generatedKeysScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(importExportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(keyGenerationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        tabsPanel.addTab("Generate Certificates", certificateGenerationTab);

        certificateSigningTab.setMinimumSize(new java.awt.Dimension(790, 532));

        javax.swing.GroupLayout certificateSigningTabLayout = new javax.swing.GroupLayout(certificateSigningTab);
        certificateSigningTab.setLayout(certificateSigningTabLayout);
        certificateSigningTabLayout.setHorizontalGroup(
            certificateSigningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1195, Short.MAX_VALUE)
        );
        certificateSigningTabLayout.setVerticalGroup(
            certificateSigningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 634, Short.MAX_VALUE)
        );

        tabsPanel.addTab("Sign Certificates", certificateSigningTab);

        statusBarTextField.setEditable(false);
        statusBarTextField.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        statusBarTextField.setForeground(new java.awt.Color(255, 0, 0));
        statusBarTextField.setBorder(null);
        statusBarTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        statusBarTextField.setMinimumSize(new java.awt.Dimension(800, 17));
        statusBarTextField.setName(""); // NOI18N
        statusBarTextField.setPreferredSize(new java.awt.Dimension(800, 17));

        jMenu1.setMnemonic('f');
        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('e');
        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setMnemonic('v');
        jMenu3.setText("View");
        jMenu3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(statusBarTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(statusBarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabsPanel.getAccessibleContext().setAccessibleName("tabsPanel");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateKeysButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateKeysButtonActionPerformed
        try {
            String keyName = keyNameTextField.getText();
            if (keyName.trim().isEmpty()) {
                statusBarTextField.setForeground(Errors.COLOR);
                statusBarTextField.setText(Errors.NO_KEY_NAME_SPECIFIED);
                keyNameTextField.requestFocus();
                return;
            }
            
            int keySize = Integer.parseInt(keySizeTextField.getText());
            
            KeyPair keys = manager.generateKeyPair(keySize);

            keyContainer.setKeyName(keyName);
            keyContainer.setKeySize(keySize);
            keyContainer.setKeys(keys);

            publicKeyTextField.setText(Base64.getEncoder()
                    .encodeToString(keys.getPublic().getEncoded()).substring(0, 19).concat("..."));
            privateKeyTextField.setText(Base64.getEncoder()
                    .encodeToString(keys.getPrivate().getEncoded()).substring(0, 19).concat("..."));

            statusBarTextField.setForeground(Messages.COLOR);
            statusBarTextField.setText(Messages.SUCCESSFUL_KEY_GENERATION);

        } catch (NumberFormatException e) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.INVALID_NUMBER_FORMAT + " "
                    + Errors.INVALID_KEY_SIZE_FORMAT);
            keySizeTextField.requestFocus();
        } catch (InvalidParameterException e) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.KEY_SIZE_TOO_SMALL);
            keySizeTextField.requestFocus();
        } catch (NoSuchAlgorithmException ex) {
            exit(Errors.NO_SUCH_ALGORITHM);
        }
    }//GEN-LAST:event_generateKeysButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "PCKS#12", "p12");
        fileChooser.setFileFilter(filter);
        
        File workingDirectory = new File(System.getProperty("user.dir"));
        fileChooser.setCurrentDirectory(workingDirectory);
        
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            statusBarTextField.setForeground(Messages.COLOR);
            statusBarTextField.setText(Messages.SUCCESSFUL_EXPORT + fileChooser
                    .getSelectedFile().getName());
        }
        // IZVOZ...

    }//GEN-LAST:event_exportButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        /*JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "PCKS#12", "p12");
        fileChooser.setFileFilter(filter);
        
        File workingDirectory = new File(System.getProperty("user.dir"));
        fileChooser.setCurrentDirectory(workingDirectory);
        
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            statusBarTextField.setForeground(Messages.COLOR);
            statusBarTextField.setText(Messages.SUCCESSFUL_IMPORT + fileChooser
                    .getSelectedFile().getName());
        }
        */
        ImportPopup importPopup = new ImportPopup(this);
        importPopup.setVisible(true);
        this.setEnabled(false);
        
        
    }//GEN-LAST:event_importButtonActionPerformed

    private void saveKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveKeyButtonActionPerformed
        /*String keyName = keyNameTextField.getText().trim();
        if (keyName.isEmpty()) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_KEY_NAME_SPECIFIED);
            return;
        }
        String keySize = keySizeTextField.getText().trim();
         if (keySize.isEmpty()) {
             statusBarTextField.setCaretColor(Errors.COLOR);
             statusBarTextField.setText(Errors.NO_KEY_SIZE_SPECIFIED);
             return;
         }*/

        // TODO(mitap94): Dodaj requestFocus() kada bude greska
        String serialNumber = serialNumberTextField.getText();
        if (serialNumber.trim().isEmpty()) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_SERIAL_NUMBER_SPECIFIED);
            return;
        }

        int serialNumberInt;
        try {
            serialNumberInt = Integer.parseInt(serialNumber);
        } catch (NumberFormatException e) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.INVALID_NUMBER_FORMAT + " "
                    + Errors.INVALID_SERIAL_NUMBER_FORMAT);
            return;
        }

        String dateNotBeforeString = dateNotBeforeTextField.getText();
        if (dateNotBeforeString.trim().isEmpty()) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_DATE_SPECIFIED);
            return;
        }

        String dateNotAfterString = dateNotAfterTextField.getText();
        if (dateNotAfterString.trim().isEmpty()) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_DATE_SPECIFIED);
            return;
        }

        String commonName = commonNameTextField.getText();
        if (commonName.trim().isEmpty()) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_COMMON_NAME_SPECIFIED);
            return;
        }

        String organizationName = organizationNameTextField.getText();
        if (organizationName.trim().isEmpty()) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_ORGANIZATION_NAME_SPECIFIED);
            return;
        }

        String organizationalUnitName = organizationalUnitNameTextField.getText();
        if (organizationalUnitName.trim().isEmpty()) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_ORGANIZATIONAL_UNIT_NAME_SPECIFIED);
            return;
        }

        String country = countryTextField.getText();
        if (country.trim().isEmpty()) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_COUNTRY_SPECIFIED);
            return;
        }

        String state = stateTextField.getText();
        if (state.trim().isEmpty()) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_STATE_SPECIFIED);
            return;
        }

        String locality = localityTextField.getText();
        if (locality.trim().isEmpty()) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_LOCALITY_SPECIFIED);
            return;
        }

        String email = emailTextField.getText();
        if (email.trim().isEmpty()) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_EMAIL_SPECIFIED);
            return;
        }

        // TODO(mitap94): Premesti sve sto moze u konstruktor kako bi se ubrzala aplikacija
        Pattern validEmailRegex = Pattern.compile(EMAIL_REGEXP, Pattern.CASE_INSENSITIVE);
        Matcher matcher = validEmailRegex.matcher(email);
        if (!matcher.find()) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.INVALID_EMAIL_ADDRESS);
            return;
        }

        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);
        Date dateNotBefore = null;
        Date dateNotAfter = null;

        try {
            dateNotBefore = dateFormat.parse(dateNotBeforeString);
            dateNotAfter = dateFormat.parse(dateNotAfterString);
        } catch (ParseException e) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.INVALID_DATE_FORMAT);
            return;
        }

        long dateDifference = dateNotAfter.getTime() - dateNotBefore.getTime();
        if (dateDifference < 0) {
            statusBarTextField.setCaretColor(Errors.COLOR);
            statusBarTextField.setText(Errors.INVALID_DATE_ORDER);
            return;
        }

        // keysize i keyname se dohvataju iz keycontainer
        // TODO(mitap94): Ubacivanje u sertifikat i save

    }//GEN-LAST:event_saveKeyButtonActionPerformed

    private void extensionsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extensionsCheckBoxActionPerformed
        if (extensionsCheckBox.isSelected()) {
            extensionsPanel.setVisible(true);
        }
        else {
            extensionsPanel.setVisible(false);
        }
    }//GEN-LAST:event_extensionsCheckBoxActionPerformed

    private void myInitComponents() {
        screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frameSize = this.getSize();
        leftCornerAnchor = new Point((int) (screenSize.width / 2 - frameSize.width / 2),
                (int) (screenSize.height / 2 - frameSize.height / 2));
        setLocation(leftCornerAnchor);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        extensionsPanel.setVisible(false);

        keyContainer = new KeyContainer();

        GuiUtil.attachPopupMenuSpecial(publicKeyTextField, keyContainer, 0);
        GuiUtil.attachPopupMenuSpecial(privateKeyTextField, keyContainer, 1);
        GuiUtil.attachPopupMenu(keyNameTextField);
        GuiUtil.attachPopupMenu(keySizeTextField);
        GuiUtil.attachPopupMenu(dateNotAfterTextField);
        GuiUtil.attachPopupMenu(dateNotBeforeTextField);
        GuiUtil.attachPopupMenu(serialNumberTextField);
        GuiUtil.attachPopupMenu(commonNameTextField);
        GuiUtil.attachPopupMenu(organizationNameTextField);
        GuiUtil.attachPopupMenu(organizationalUnitNameTextField);
        GuiUtil.attachPopupMenu(emailTextField);
        GuiUtil.attachPopupMenu(countryTextField);
        GuiUtil.attachPopupMenu(stateTextField);
        GuiUtil.attachPopupMenu(localityTextField);

        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                try {
                    manager.saveStore();
                } catch (KeyStoreException ex) {
                    JOptionPane.showMessageDialog(null, Errors.KEY_STORE_NOT_LOADED + "\n"
                            + Errors.CANNOT_SAVE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, Errors.CANNOT_SAVE);
                } catch (NoSuchAlgorithmException ex) {
                    JOptionPane.showMessageDialog(null, Errors.CRITICAL_ERROR);
                } catch (CertificateException ex) {
                    JOptionPane.showMessageDialog(null, Errors.CERTIFICATE_CORRUPTION);
                }
            }
        });
    }

    private final String EMAIL_REGEXP = "^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$";
    private final String DATE_FORMAT = "dd/MM/yyyy hh:mm:ss";

    private Dimension screenSize;
    private Dimension frameSize;
    private Point leftCornerAnchor;

    final CertManager manager;
    private KeyContainer keyContainer;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel certificateGenerationTab;
    private javax.swing.JPanel certificateSigningTab;
    private javax.swing.JLabel certificateVersionLabel;
    private javax.swing.JLabel certificateVersionLabel1;
    private javax.swing.JLabel commonNameLabel;
    private javax.swing.JTextField commonNameTextField;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JTextField countryTextField;
    private javax.swing.JLabel dateFormatLabel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel dateNotAfterLabel;
    private javax.swing.JFormattedTextField dateNotAfterTextField;
    private javax.swing.JLabel dateNotBeforeLabel;
    private javax.swing.JFormattedTextField dateNotBeforeTextField;
    private javax.swing.JPanel datePanel;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JButton exportButton;
    private javax.swing.JCheckBox extensionsCheckBox;
    private javax.swing.JLabel extensionsLabel;
    private javax.swing.JPanel extensionsPanel;
    private javax.swing.JButton generateKeysButton;
    private javax.swing.JLabel generatedKeysLabel;
    private javax.swing.JList<String> generatedKeysList;
    private javax.swing.JScrollPane generatedKeysScrollPanel;
    private javax.swing.JButton importButton;
    private javax.swing.JPanel importExportPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel keyGenerationLabel;
    private javax.swing.JPanel keyGenerationPanel;
    private javax.swing.JSeparator keyGenerationSeparator;
    private javax.swing.JSeparator keyGenerationSeparator1;
    private javax.swing.JSeparator keyGenerationSeparator2;
    private javax.swing.JLabel keyNameLabel;
    private javax.swing.JTextField keyNameTextField;
    private javax.swing.JLabel keySizeLabel;
    private javax.swing.JTextField keySizeTextField;
    private javax.swing.JLabel localityLabel;
    private javax.swing.JTextField localityTextField;
    private javax.swing.JLabel organizationNameLabel;
    private javax.swing.JTextField organizationNameTextField;
    private javax.swing.JLabel organizationalUnitNameLabel;
    private javax.swing.JTextField organizationalUnitNameTextField;
    private javax.swing.JLabel privateKeyLabel;
    private javax.swing.JTextField privateKeyTextField;
    private javax.swing.JLabel publicKeyLabel;
    private javax.swing.JTextField publicKeyTextField;
    private javax.swing.JButton saveKeyButton;
    private javax.swing.JLabel serialNumberLabel;
    private javax.swing.JTextField serialNumberTextField;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JTextField stateTextField;
    private javax.swing.JTextField statusBarTextField;
    private javax.swing.JTabbedPane tabsPanel;
    // End of variables declaration//GEN-END:variables
}
