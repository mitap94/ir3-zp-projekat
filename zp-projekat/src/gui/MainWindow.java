package gui;

import java.security.KeyPair;
import crypto.CertManager;
import crypto.KeyContainer;
import crypto.utils.BouncyCastleX509Builder;
import crypto.utils.X509Builder;
import crypto.utils.X509SelfSignedToCsr;
import crypto.utils.X509Signer;

import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.io.StringWriter;
import static java.lang.System.exit;
import java.math.BigInteger;
import java.security.InvalidParameterException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.security.interfaces.RSAPublicKey;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.bouncycastle.asn1.x500.X500Name;
import org.bouncycastle.asn1.x500.style.BCStyle;
import org.bouncycastle.asn1.x500.style.IETFUtils;
import org.bouncycastle.asn1.x509.BasicConstraints;
import org.bouncycastle.asn1.x509.Extension;
import org.bouncycastle.asn1.x509.KeyUsage;
import org.bouncycastle.cert.jcajce.JcaX509CertificateHolder;
import org.bouncycastle.jce.X509KeyUsage;
import org.bouncycastle.openssl.jcajce.JcaPEMWriter;
import org.bouncycastle.operator.OperatorCreationException;
import org.bouncycastle.pkcs.PKCS10CertificationRequest;

/**
 *
 * @author Mita
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow(CertManager manager) {
        initComponents();
        myInitComponents();

        this.manager = manager;
        initializeList();
    }

    public void setStatus(String string, Color color) {
        statusBarTextField.setForeground(color);
        statusBarTextField.setText(string);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabsPanel = new javax.swing.JTabbedPane();
        certificateGenerationTab = new javax.swing.JPanel();
        generatedKeysLabel = new javax.swing.JLabel();
        importExportPanel = new javax.swing.JPanel();
        importButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        keyGenerationPanel = new javax.swing.JPanel();
        saveKeyButton = new javax.swing.JButton();
        publicKeyTextField = new javax.swing.JTextField();
        generateKeysButton = new javax.swing.JButton();
        privateKeyTextField = new javax.swing.JTextField();
        publicKeyLabel = new javax.swing.JLabel();
        keyNameLabel = new javax.swing.JLabel();
        keyNameTextField = new javax.swing.JTextField();
        privateKeyLabel = new javax.swing.JLabel();
        keySizeTextField = new javax.swing.JTextField();
        keySizeLabel = new javax.swing.JLabel();
        certificateVersionLabel = new javax.swing.JLabel();
        certificateVersionLabel1 = new javax.swing.JLabel();
        serialNumberLabel = new javax.swing.JLabel();
        serialNumberTextField = new javax.swing.JTextField();
        keyGenerationSeparator = new javax.swing.JSeparator();
        dateLabel = new javax.swing.JLabel();
        datePanel = new javax.swing.JPanel();
        dateNotBeforeLabel = new javax.swing.JLabel();
        dateNotAfterLabel = new javax.swing.JLabel();
        dateNotBeforeTextField = new javax.swing.JFormattedTextField();
        dateNotAfterTextField = new javax.swing.JFormattedTextField();
        dateFormatLabel = new javax.swing.JLabel();
        keyGenerationSeparator1 = new javax.swing.JSeparator();
        commonNameLabel = new javax.swing.JLabel();
        commonNameTextField = new javax.swing.JTextField();
        organizationNameLabel = new javax.swing.JLabel();
        organizationNameTextField = new javax.swing.JTextField();
        organizationalUnitNameLabel = new javax.swing.JLabel();
        organizationalUnitNameTextField = new javax.swing.JTextField();
        localityTextField = new javax.swing.JTextField();
        localityLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        countryLabel = new javax.swing.JLabel();
        keyGenerationSeparator2 = new javax.swing.JSeparator();
        countryTextField = new javax.swing.JTextField();
        stateLabel = new javax.swing.JLabel();
        stateTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        passwordLabel = new javax.swing.JLabel();
        clearFormButton = new javax.swing.JButton();
        extensionsButton = new javax.swing.JButton();
        keyGenerationLabel = new javax.swing.JLabel();
        generatedKeysScrollPanel = new javax.swing.JScrollPane();
        generatedKeysList = new javax.swing.JList<>();
        certificateSigningTab = new javax.swing.JPanel();
        generatedKeysScrollPanel1 = new javax.swing.JScrollPane();
        generatedKeysList1 = new javax.swing.JList<>();
        generatedKeysLabel1 = new javax.swing.JLabel();
        certificateViewPanel = new javax.swing.JPanel();
        signatureAlgorithmTextField = new javax.swing.JTextField();
        signatureAlgorithmLabel = new javax.swing.JLabel();
        certificateVersionLabel2 = new javax.swing.JLabel();
        certificateVersionLabel3 = new javax.swing.JLabel();
        keyGenerationSeparator3 = new javax.swing.JSeparator();
        dateLabel1 = new javax.swing.JLabel();
        dateFormatLabel1 = new javax.swing.JLabel();
        keyGenerationSeparator4 = new javax.swing.JSeparator();
        commonNameLabel1 = new javax.swing.JLabel();
        issuerCommonNameTextField = new javax.swing.JTextField();
        organizationNameLabel1 = new javax.swing.JLabel();
        issuerOrganizationNameTextField = new javax.swing.JTextField();
        organizationalUnitNameLabel1 = new javax.swing.JLabel();
        issuerOrganizationalUnitNameTextField = new javax.swing.JTextField();
        issuerLocalityTextField = new javax.swing.JTextField();
        localityLabel1 = new javax.swing.JLabel();
        emailLabel1 = new javax.swing.JLabel();
        countryLabel1 = new javax.swing.JLabel();
        keyGenerationSeparator5 = new javax.swing.JSeparator();
        issuerCountryTextField = new javax.swing.JTextField();
        stateLabel1 = new javax.swing.JLabel();
        issuerStateTextField = new javax.swing.JTextField();
        issuerEmailTextField = new javax.swing.JTextField();
        dateNotBeforeTextFieldSign = new javax.swing.JFormattedTextField();
        dateNotAfterTextFieldSign = new javax.swing.JFormattedTextField();
        dateNotAfterLabel1 = new javax.swing.JLabel();
        dateNotBeforeLabel1 = new javax.swing.JLabel();
        subjectLabel = new javax.swing.JLabel();
        issuerLabel = new javax.swing.JLabel();
        commonNameLabel2 = new javax.swing.JLabel();
        subjectCommonNameTextField = new javax.swing.JTextField();
        subjectOrganizationalUnitNameTextField = new javax.swing.JTextField();
        organizationalUnitNameLabel2 = new javax.swing.JLabel();
        organizationNameLabel2 = new javax.swing.JLabel();
        emailLabel2 = new javax.swing.JLabel();
        subjectOrganizationNameTextField = new javax.swing.JTextField();
        subjectEmailTextField = new javax.swing.JTextField();
        countryLabel2 = new javax.swing.JLabel();
        localityLabel2 = new javax.swing.JLabel();
        subjectLocalityTextField = new javax.swing.JTextField();
        subjectCountryTextField = new javax.swing.JTextField();
        subjectStateTextField = new javax.swing.JTextField();
        stateLabel2 = new javax.swing.JLabel();
        publicKeyAlgorithmLabel = new javax.swing.JLabel();
        publicKeyAlgorithmTextField = new javax.swing.JTextField();
        keyLengthLabel = new javax.swing.JLabel();
        viewModulusButton = new javax.swing.JButton();
        keyLengthTextField = new javax.swing.JTextField();
        viewSignatureButton = new javax.swing.JButton();
        viewExtensionsButton = new javax.swing.JButton();
        keyGenerationSeparator6 = new javax.swing.JSeparator();
        signButton = new javax.swing.JButton();
        viewCSRButton = new javax.swing.JButton();
        serialNumberLabel1 = new javax.swing.JLabel();
        serialNumberTextFieldSign = new javax.swing.JTextField();
        previewCertificateButton = new javax.swing.JButton();
        previewEncodedCertificateButton = new javax.swing.JButton();
        certificateViewLabel = new javax.swing.JLabel();
        viewCertificateButton = new javax.swing.JButton();
        useCertificateButton = new javax.swing.JButton();
        passwordFieldViewCertificate = new javax.swing.JPasswordField();
        passwordFieldUseCertificate = new javax.swing.JPasswordField();
        passwordViewCertificateLabel = new javax.swing.JLabel();
        passwordUseCertificateLabel = new javax.swing.JLabel();
        statusBarTextField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(" x.509 CertManager");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(880, 640));
        setName("Window"); // NOI18N
        setSize(new java.awt.Dimension(800, 640));

        tabsPanel.setMinimumSize(new java.awt.Dimension(795, 560));
        tabsPanel.setName("tabsPanel"); // NOI18N
        tabsPanel.setPreferredSize(new java.awt.Dimension(795, 560));

        certificateGenerationTab.setMinimumSize(new java.awt.Dimension(790, 532));
        certificateGenerationTab.setPreferredSize(new java.awt.Dimension(790, 532));

        generatedKeysLabel.setLabelFor(generatedKeysScrollPanel);
        generatedKeysLabel.setText("Generated keys");

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout importExportPanelLayout = new javax.swing.GroupLayout(importExportPanel);
        importExportPanel.setLayout(importExportPanelLayout);
        importExportPanelLayout.setHorizontalGroup(
            importExportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(importExportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(importButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exportButton)
                .addContainerGap())
        );
        importExportPanelLayout.setVerticalGroup(
            importExportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(importExportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(importExportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportButton)
                    .addComponent(importButton))
                .addContainerGap())
        );

        keyGenerationPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        saveKeyButton.setText("Save Certificate");
        saveKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveKeyButtonActionPerformed(evt);
            }
        });

        publicKeyTextField.setEditable(false);
        publicKeyTextField.setBackground(new java.awt.Color(245, 245, 245));
        publicKeyTextField.setForeground(new java.awt.Color(102, 102, 102));
        publicKeyTextField.setDisabledTextColor(new java.awt.Color(102, 102, 102));

        generateKeysButton.setText("Generate Key Pair");
        generateKeysButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateKeysButtonActionPerformed(evt);
            }
        });

        privateKeyTextField.setEditable(false);
        privateKeyTextField.setBackground(new java.awt.Color(245, 245, 245));
        privateKeyTextField.setForeground(new java.awt.Color(102, 102, 102));
        privateKeyTextField.setDisabledTextColor(new java.awt.Color(102, 102, 102));

        publicKeyLabel.setLabelFor(publicKeyTextField);
        publicKeyLabel.setText("Public key:");

        keyNameLabel.setLabelFor(keyNameTextField);
        keyNameLabel.setText("Key name:");

        keyNameTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        keyNameTextField.setName(""); // NOI18N
        keyNameTextField.setNextFocusableComponent(keySizeTextField);

        privateKeyLabel.setLabelFor(privateKeyTextField);
        privateKeyLabel.setText("Private key:");

        keySizeTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        keySizeTextField.setNextFocusableComponent(generateKeysButton);

        keySizeLabel.setLabelFor(keySizeTextField);
        keySizeLabel.setText("Key size:");

        certificateVersionLabel.setLabelFor(certificateVersionLabel1);
        certificateVersionLabel.setText("Certificate version:");

        certificateVersionLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        certificateVersionLabel1.setText("v3");

        serialNumberLabel.setLabelFor(serialNumberTextField);
        serialNumberLabel.setText("Serial number:");

        dateLabel.setLabelFor(datePanel);
        dateLabel.setText("Validity date and time");

        datePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        dateNotBeforeLabel.setLabelFor(dateNotBeforeTextField);
        dateNotBeforeLabel.setText("Not before:");

        dateNotAfterLabel.setLabelFor(dateNotAfterTextField);
        dateNotAfterLabel.setText("Not after:");

        dateNotBeforeTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy hh:mm:ss"))));

        dateNotAfterTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy hh:mm:ss"))));

        javax.swing.GroupLayout datePanelLayout = new javax.swing.GroupLayout(datePanel);
        datePanel.setLayout(datePanelLayout);
        datePanelLayout.setHorizontalGroup(
            datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateNotBeforeLabel)
                    .addComponent(dateNotAfterLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateNotBeforeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateNotAfterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        datePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dateNotAfterTextField, dateNotBeforeTextField});

        datePanelLayout.setVerticalGroup(
            datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateNotBeforeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateNotBeforeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateNotAfterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateNotAfterLabel))
                .addContainerGap())
        );

        datePanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dateNotAfterTextField, dateNotBeforeTextField});

        dateFormatLabel.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        dateFormatLabel.setForeground(new java.awt.Color(51, 51, 51));
        dateFormatLabel.setLabelFor(datePanel);
        dateFormatLabel.setText("(dd/mm/yyyy hh:mm:ss)");

        commonNameLabel.setLabelFor(commonNameTextField);
        commonNameLabel.setText("Common name:");

        organizationNameLabel.setLabelFor(organizationNameTextField);
        organizationNameLabel.setText("Organization:");

        organizationalUnitNameLabel.setLabelFor(organizationalUnitNameTextField);
        organizationalUnitNameLabel.setText("Organizational unit:");

        localityLabel.setLabelFor(localityTextField);
        localityLabel.setText("Locality:");

        emailLabel.setLabelFor(emailTextField);
        emailLabel.setText("E-mail:");

        countryLabel.setLabelFor(countryTextField);
        countryLabel.setText("Country:");

        stateLabel.setLabelFor(stateTextField);
        stateLabel.setText("State:");

        passwordLabel.setText("Password:");

        clearFormButton.setText("Clear Form");
        clearFormButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormButtonActionPerformed(evt);
            }
        });

        extensionsButton.setText("Extensions");
        extensionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extensionsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout keyGenerationPanelLayout = new javax.swing.GroupLayout(keyGenerationPanel);
        keyGenerationPanel.setLayout(keyGenerationPanelLayout);
        keyGenerationPanelLayout.setHorizontalGroup(
            keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(keyGenerationSeparator1)
                    .addComponent(keyGenerationSeparator2))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, keyGenerationPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(keyGenerationSeparator)
                .addGap(10, 10, 10))
            .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(keySizeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(keyNameLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(keyNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(keySizeTextField))
                .addGap(88, 88, 88)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(privateKeyLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(publicKeyLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(3, 3, 3)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(privateKeyTextField)
                    .addComponent(publicKeyTextField))
                .addContainerGap())
            .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                        .addComponent(saveKeyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(clearFormButton))
                    .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(datePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                            .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(commonNameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(organizationalUnitNameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(countryLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(localityLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(passwordLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(localityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(countryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(organizationalUnitNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(commonNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(dateLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(dateFormatLabel))
                        .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                            .addGap(90, 90, 90)
                            .addComponent(generateKeysButton))))
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(certificateVersionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(certificateVersionLabel1)
                        .addGap(10, 10, 10))
                    .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(stateLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(emailLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(organizationNameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(serialNumberLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(stateTextField)
                            .addComponent(emailTextField)
                            .addComponent(organizationNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                            .addComponent(serialNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(extensionsButton))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        keyGenerationPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {commonNameTextField, countryTextField, organizationalUnitNameTextField});

        keyGenerationPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {emailTextField, organizationNameTextField, serialNumberTextField, stateTextField});

        keyGenerationPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {localityTextField, passwordField});

        keyGenerationPanelLayout.setVerticalGroup(
            keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyNameLabel)
                    .addComponent(publicKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(publicKeyLabel))
                .addGap(12, 12, 12)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keySizeLabel)
                    .addComponent(keySizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(privateKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(privateKeyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(generateKeysButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyGenerationSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel)
                    .addComponent(dateFormatLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(datePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyGenerationPanelLayout.createSequentialGroup()
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(serialNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serialNumberLabel))
                        .addGap(42, 42, 42)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyGenerationSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyGenerationPanelLayout.createSequentialGroup()
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(commonNameLabel)
                            .addComponent(commonNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(organizationalUnitNameLabel)
                            .addComponent(organizationalUnitNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyGenerationPanelLayout.createSequentialGroup()
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(organizationNameLabel)
                            .addComponent(organizationNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emailLabel)
                            .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyGenerationSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(countryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(countryLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(stateLabel)
                        .addComponent(stateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localityLabel)
                    .addComponent(extensionsButton))
                .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(certificateVersionLabel)
                            .addComponent(certificateVersionLabel1)))
                    .addGroup(keyGenerationPanelLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(passwordLabel)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addGroup(keyGenerationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(clearFormButton)
                            .addComponent(saveKeyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        keyGenerationPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {commonNameTextField, countryTextField, emailTextField, localityTextField, organizationNameTextField, organizationalUnitNameTextField, passwordField, serialNumberTextField, stateTextField});

        keyGenerationPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {clearFormButton, saveKeyButton});

        keyGenerationLabel.setText("Certificate information");

        generatedKeysList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        generatedKeysScrollPanel.setViewportView(generatedKeysList);

        javax.swing.GroupLayout certificateGenerationTabLayout = new javax.swing.GroupLayout(certificateGenerationTab);
        certificateGenerationTab.setLayout(certificateGenerationTabLayout);
        certificateGenerationTabLayout.setHorizontalGroup(
            certificateGenerationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, certificateGenerationTabLayout.createSequentialGroup()
                .addGroup(certificateGenerationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(certificateGenerationTabLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(keyGenerationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(certificateGenerationTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(keyGenerationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(certificateGenerationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(importExportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generatedKeysScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, certificateGenerationTabLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(generatedKeysLabel)
                .addGap(85, 85, 85))
        );
        certificateGenerationTabLayout.setVerticalGroup(
            certificateGenerationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(certificateGenerationTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(certificateGenerationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyGenerationLabel)
                    .addComponent(generatedKeysLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(certificateGenerationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(certificateGenerationTabLayout.createSequentialGroup()
                        .addComponent(generatedKeysScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(importExportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(keyGenerationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        tabsPanel.addTab("Generate Certificates", certificateGenerationTab);

        certificateSigningTab.setMinimumSize(new java.awt.Dimension(790, 532));

        generatedKeysList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        generatedKeysScrollPanel1.setViewportView(generatedKeysList1);

        generatedKeysLabel1.setLabelFor(generatedKeysScrollPanel1);
        generatedKeysLabel1.setText("Generated keys");

        certificateViewPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        signatureAlgorithmTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        signatureAlgorithmTextField.setEnabled(false);

        signatureAlgorithmLabel.setLabelFor(keySizeTextField);
        signatureAlgorithmLabel.setText("Signature algorithm:");

        certificateVersionLabel2.setLabelFor(certificateVersionLabel1);
        certificateVersionLabel2.setText("Certificate version:");

        certificateVersionLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        certificateVersionLabel3.setText("v3");

        dateLabel1.setLabelFor(datePanel);
        dateLabel1.setText("Validity date and time");

        dateFormatLabel1.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        dateFormatLabel1.setForeground(new java.awt.Color(51, 51, 51));
        dateFormatLabel1.setLabelFor(datePanel);
        dateFormatLabel1.setText("(dd/mm/yyyy hh:mm:ss)");

        commonNameLabel1.setLabelFor(commonNameTextField);
        commonNameLabel1.setText("Common name:");

        issuerCommonNameTextField.setEnabled(false);

        organizationNameLabel1.setLabelFor(organizationNameTextField);
        organizationNameLabel1.setText("Organization:");

        issuerOrganizationNameTextField.setEnabled(false);

        organizationalUnitNameLabel1.setLabelFor(organizationalUnitNameTextField);
        organizationalUnitNameLabel1.setText("Organizational unit:");

        issuerOrganizationalUnitNameTextField.setEnabled(false);

        issuerLocalityTextField.setEnabled(false);

        localityLabel1.setLabelFor(localityTextField);
        localityLabel1.setText("Locality:");

        emailLabel1.setLabelFor(emailTextField);
        emailLabel1.setText("E-mail:");

        countryLabel1.setLabelFor(countryTextField);
        countryLabel1.setText("Country:");

        issuerCountryTextField.setEnabled(false);

        stateLabel1.setLabelFor(stateTextField);
        stateLabel1.setText("State:");

        issuerStateTextField.setEnabled(false);

        issuerEmailTextField.setEnabled(false);

        dateNotBeforeTextFieldSign.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy hh:mm:ss"))));
        dateNotBeforeTextFieldSign.setEnabled(false);

        dateNotAfterTextFieldSign.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy hh:mm:ss"))));
        dateNotAfterTextFieldSign.setEnabled(false);

        dateNotAfterLabel1.setLabelFor(dateNotAfterTextField);
        dateNotAfterLabel1.setText("Not after:");

        dateNotBeforeLabel1.setLabelFor(dateNotBeforeTextField);
        dateNotBeforeLabel1.setText("Not before:");

        subjectLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        subjectLabel.setText("Subject");

        issuerLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        issuerLabel.setText("Issuer");

        commonNameLabel2.setLabelFor(commonNameTextField);
        commonNameLabel2.setText("Common name:");

        subjectCommonNameTextField.setEnabled(false);

        subjectOrganizationalUnitNameTextField.setEnabled(false);

        organizationalUnitNameLabel2.setLabelFor(organizationalUnitNameTextField);
        organizationalUnitNameLabel2.setText("Organizational unit:");

        organizationNameLabel2.setLabelFor(organizationNameTextField);
        organizationNameLabel2.setText("Organization:");

        emailLabel2.setLabelFor(emailTextField);
        emailLabel2.setText("E-mail:");

        subjectOrganizationNameTextField.setEnabled(false);

        subjectEmailTextField.setEnabled(false);

        countryLabel2.setLabelFor(countryTextField);
        countryLabel2.setText("Country:");

        localityLabel2.setLabelFor(localityTextField);
        localityLabel2.setText("Locality:");

        subjectLocalityTextField.setEnabled(false);

        subjectCountryTextField.setEnabled(false);

        subjectStateTextField.setEnabled(false);

        stateLabel2.setLabelFor(stateTextField);
        stateLabel2.setText("State:");

        publicKeyAlgorithmLabel.setLabelFor(keySizeTextField);
        publicKeyAlgorithmLabel.setText("Public key algorithm:");

        publicKeyAlgorithmTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        publicKeyAlgorithmTextField.setEnabled(false);

        keyLengthLabel.setText("Key length:");

        viewModulusButton.setText("View modulus");
        viewModulusButton.setEnabled(false);
        viewModulusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewModulusButtonActionPerformed(evt);
            }
        });

        keyLengthTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        keyLengthTextField.setEnabled(false);

        viewSignatureButton.setText("View signature");
        viewSignatureButton.setEnabled(false);
        viewSignatureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSignatureButtonActionPerformed(evt);
            }
        });

        viewExtensionsButton.setText("View extensions");
        viewExtensionsButton.setEnabled(false);
        viewExtensionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewExtensionsButtonActionPerformed(evt);
            }
        });

        signButton.setText("Sign Certificate");
        signButton.setEnabled(false);
        signButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signButtonActionPerformed(evt);
            }
        });

        viewCSRButton.setText("View CSR");
        viewCSRButton.setEnabled(false);
        viewCSRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCSRButtonActionPerformed(evt);
            }
        });

        serialNumberLabel1.setLabelFor(serialNumberTextFieldSign);
        serialNumberLabel1.setText("Serial number:");

        serialNumberTextFieldSign.setEnabled(false);

        previewCertificateButton.setText("Preview certificate");
        previewCertificateButton.setEnabled(false);
        previewCertificateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewCertificateButtonActionPerformed(evt);
            }
        });

        previewEncodedCertificateButton.setText("Preview encoded certificate");
        previewEncodedCertificateButton.setEnabled(false);
        previewEncodedCertificateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewEncodedCertificateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout certificateViewPanelLayout = new javax.swing.GroupLayout(certificateViewPanel);
        certificateViewPanel.setLayout(certificateViewPanelLayout);
        certificateViewPanelLayout.setHorizontalGroup(
            certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(certificateViewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(keyGenerationSeparator4)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, certificateViewPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(keyGenerationSeparator3)
                .addGap(10, 10, 10))
            .addGroup(certificateViewPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(keyGenerationSeparator5)
                .addContainerGap())
            .addGroup(certificateViewPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(keyGenerationSeparator6)
                .addContainerGap())
            .addGroup(certificateViewPanelLayout.createSequentialGroup()
                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(certificateViewPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(commonNameLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(organizationalUnitNameLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(commonNameLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(organizationalUnitNameLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(publicKeyAlgorithmLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(keyLengthLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(signatureAlgorithmLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(certificateViewPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(signButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(certificateViewPanelLayout.createSequentialGroup()
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(keyLengthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(publicKeyAlgorithmTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(certificateViewPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(viewModulusButton)
                                .addGap(41, 41, 41)
                                .addComponent(viewExtensionsButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(certificateViewPanelLayout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(certificateViewPanelLayout.createSequentialGroup()
                                        .addComponent(dateLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dateFormatLabel1))
                                    .addGroup(certificateViewPanelLayout.createSequentialGroup()
                                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(dateNotBeforeLabel1)
                                            .addComponent(dateNotAfterLabel1))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dateNotBeforeTextFieldSign, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(dateNotAfterTextFieldSign, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(certificateViewPanelLayout.createSequentialGroup()
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(certificateViewPanelLayout.createSequentialGroup()
                                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(issuerCommonNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(issuerOrganizationalUnitNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subjectCommonNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subjectOrganizationalUnitNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(organizationNameLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(emailLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(organizationNameLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(emailLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(issuerOrganizationNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(issuerEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subjectOrganizationNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subjectEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(countryLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(localityLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(countryLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(localityLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(issuerCountryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subjectCountryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subjectLocalityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(issuerLocalityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(stateLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(stateLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(issuerStateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(subjectStateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(viewCSRButton))
                                .addGap(0, 56, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, certificateViewPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(previewCertificateButton)
                                .addGap(18, 18, 18)
                                .addComponent(previewEncodedCertificateButton)
                                .addGap(382, 382, 382)
                                .addComponent(certificateVersionLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(certificateVersionLabel3)))
                        .addContainerGap())
                    .addGroup(certificateViewPanelLayout.createSequentialGroup()
                        .addComponent(signatureAlgorithmTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(viewSignatureButton)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(certificateViewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(certificateViewPanelLayout.createSequentialGroup()
                        .addComponent(serialNumberLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(serialNumberTextFieldSign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(issuerLabel)
                    .addComponent(subjectLabel))
                .addContainerGap())
        );

        certificateViewPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dateNotAfterTextFieldSign, dateNotBeforeTextFieldSign});

        certificateViewPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {publicKeyAlgorithmTextField, serialNumberTextFieldSign});

        certificateViewPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {issuerCommonNameTextField, issuerCountryTextField, issuerEmailTextField, issuerLocalityTextField, issuerOrganizationNameTextField, issuerOrganizationalUnitNameTextField, issuerStateTextField, subjectCommonNameTextField, subjectCountryTextField, subjectEmailTextField, subjectLocalityTextField, subjectOrganizationNameTextField, subjectOrganizationalUnitNameTextField, subjectStateTextField});

        certificateViewPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {viewExtensionsButton, viewModulusButton, viewSignatureButton});

        certificateViewPanelLayout.setVerticalGroup(
            certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(certificateViewPanelLayout.createSequentialGroup()
                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel1)
                    .addComponent(dateFormatLabel1))
                .addGap(11, 11, 11)
                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(serialNumberTextFieldSign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serialNumberLabel1)
                    .addComponent(dateNotBeforeLabel1)
                    .addComponent(dateNotBeforeTextFieldSign, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateNotAfterTextFieldSign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateNotAfterLabel1))
                .addGap(11, 11, 11)
                .addComponent(keyGenerationSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(issuerLabel)
                .addGap(7, 7, 7)
                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(issuerCountryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countryLabel1)
                    .addComponent(issuerOrganizationNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(organizationNameLabel1)
                    .addComponent(issuerCommonNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(commonNameLabel1)
                    .addComponent(issuerStateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stateLabel1))
                .addGap(12, 12, 12)
                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(organizationalUnitNameLabel1)
                    .addComponent(issuerOrganizationalUnitNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailLabel1)
                    .addComponent(issuerEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localityLabel1)
                    .addComponent(issuerLocalityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keyGenerationSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subjectLabel)
                .addGap(7, 7, 7)
                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(certificateViewPanelLayout.createSequentialGroup()
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(subjectCommonNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(commonNameLabel2))
                        .addGap(12, 12, 12)
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(subjectOrganizationalUnitNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(organizationalUnitNameLabel2)))
                    .addGroup(certificateViewPanelLayout.createSequentialGroup()
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(organizationNameLabel2)
                            .addComponent(subjectOrganizationNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(emailLabel2)
                            .addComponent(subjectEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(certificateViewPanelLayout.createSequentialGroup()
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(countryLabel2)
                            .addComponent(subjectCountryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stateLabel2)
                            .addComponent(subjectStateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(subjectLocalityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(localityLabel2)
                            .addComponent(viewCSRButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keyGenerationSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(certificateViewPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(publicKeyAlgorithmLabel)
                            .addComponent(publicKeyAlgorithmTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(viewModulusButton)
                            .addComponent(viewExtensionsButton))
                        .addGap(18, 18, 18)
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(keyLengthLabel)
                            .addComponent(keyLengthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(keyGenerationSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(signatureAlgorithmLabel)
                            .addComponent(signatureAlgorithmTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(viewSignatureButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(signButton)
                            .addComponent(previewCertificateButton)
                            .addComponent(previewEncodedCertificateButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, certificateViewPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(certificateViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(certificateVersionLabel2)
                            .addComponent(certificateVersionLabel3))))
                .addContainerGap())
        );

        certificateViewPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {issuerCommonNameTextField, issuerCountryTextField, issuerEmailTextField, issuerLocalityTextField, issuerOrganizationNameTextField, issuerOrganizationalUnitNameTextField, issuerStateTextField, keyLengthTextField, publicKeyAlgorithmTextField, signatureAlgorithmTextField, subjectCommonNameTextField, subjectCountryTextField, subjectEmailTextField, subjectLocalityTextField, subjectOrganizationNameTextField, subjectOrganizationalUnitNameTextField, subjectStateTextField});

        certificateViewPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dateNotAfterTextFieldSign, dateNotBeforeTextFieldSign, serialNumberTextFieldSign});

        certificateViewPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {viewExtensionsButton, viewModulusButton, viewSignatureButton});

        certificateViewLabel.setLabelFor(certificateViewPanel);
        certificateViewLabel.setText("Certificate information");

        viewCertificateButton.setText("Set Signee");
        viewCertificateButton.setToolTipText("View the certificate and generate a CSR");
        viewCertificateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCertificateButtonActionPerformed(evt);
            }
        });

        useCertificateButton.setText("Set Signer");
        useCertificateButton.setToolTipText("Use the certificate for signing");
        useCertificateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useCertificateButtonActionPerformed(evt);
            }
        });

        passwordViewCertificateLabel.setText("Signee password:");

        passwordUseCertificateLabel.setText("Signer password:");

        javax.swing.GroupLayout certificateSigningTabLayout = new javax.swing.GroupLayout(certificateSigningTab);
        certificateSigningTab.setLayout(certificateSigningTabLayout);
        certificateSigningTabLayout.setHorizontalGroup(
            certificateSigningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(certificateSigningTabLayout.createSequentialGroup()
                .addGroup(certificateSigningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(certificateSigningTabLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(certificateViewLabel))
                    .addGroup(certificateSigningTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(certificateViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10)))
                .addGroup(certificateSigningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(certificateSigningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(passwordFieldViewCertificate, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(generatedKeysScrollPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(viewCertificateButton)
                        .addComponent(passwordFieldUseCertificate, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(useCertificateButton))
                    .addGroup(certificateSigningTabLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(generatedKeysLabel1))
                    .addComponent(passwordViewCertificateLabel)
                    .addComponent(passwordUseCertificateLabel))
                .addGap(10, 10, 10))
        );

        certificateSigningTabLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {useCertificateButton, viewCertificateButton});

        certificateSigningTabLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {passwordFieldUseCertificate, passwordFieldViewCertificate});

        certificateSigningTabLayout.setVerticalGroup(
            certificateSigningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(certificateSigningTabLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(certificateSigningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(generatedKeysLabel1)
                    .addComponent(certificateViewLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(certificateSigningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(certificateSigningTabLayout.createSequentialGroup()
                        .addComponent(generatedKeysScrollPanel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(passwordViewCertificateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordFieldViewCertificate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(viewCertificateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(passwordUseCertificateLabel)
                        .addGap(6, 6, 6)
                        .addComponent(passwordFieldUseCertificate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(useCertificateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(certificateViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        certificateSigningTabLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {useCertificateButton, viewCertificateButton});

        tabsPanel.addTab("Sign Certificates", certificateSigningTab);

        statusBarTextField.setEditable(false);
        statusBarTextField.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        statusBarTextField.setForeground(new java.awt.Color(255, 0, 0));
        statusBarTextField.setBorder(null);
        statusBarTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        statusBarTextField.setMinimumSize(new java.awt.Dimension(800, 17));
        statusBarTextField.setName(""); // NOI18N
        statusBarTextField.setPreferredSize(new java.awt.Dimension(800, 17));

        jMenu1.setMnemonic('f');
        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('e');
        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setMnemonic('v');
        jMenu3.setText("View");
        jMenu3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusBarTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tabsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(statusBarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabsPanel.getAccessibleContext().setAccessibleName("tabsPanel");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearFormButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormButtonActionPerformed
        clearForm();
        setStatus(Messages.FORM_CLEARED, Messages.COLOR);
    }//GEN-LAST:event_clearFormButtonActionPerformed

    private void generateKeysButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateKeysButtonActionPerformed
        try {
            String keyName = keyNameTextField.getText();
            if (keyName.trim().isEmpty()) {
                statusBarTextField.setForeground(Errors.COLOR);
                statusBarTextField.setText(Errors.NO_KEY_NAME_SPECIFIED);
                keyNameTextField.requestFocus();
                return;
            }

            int keySize = Integer.parseInt(keySizeTextField.getText());

            KeyPair keys = manager.generateKeyPair(keySize);

            keyContainer.setKeyName(keyName);
            keyContainer.setKeySize(keySize);
            keyContainer.setKeys(keys);

            publicKeyTextField.setText(Base64.getEncoder()
                    .encodeToString(keys.getPublic().getEncoded()).substring(0, 19).concat("..."));
            privateKeyTextField.setText(Base64.getEncoder()
                    .encodeToString(keys.getPrivate().getEncoded()).substring(0, 19).concat("..."));

            statusBarTextField.setForeground(Messages.COLOR);
            statusBarTextField.setText(Messages.SUCCESSFUL_KEY_GENERATION);

        } catch (NumberFormatException e) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.INVALID_NUMBER_FORMAT + " "
                    + Errors.INVALID_KEY_SIZE_FORMAT);
            keySizeTextField.requestFocus();
        } catch (InvalidParameterException e) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.KEY_SIZE_TOO_SMALL);
            keySizeTextField.requestFocus();
        } catch (NoSuchAlgorithmException ex) {
            exit(Errors.NO_SUCH_ALGORITHM);
        }
    }//GEN-LAST:event_generateKeysButtonActionPerformed

    private void saveKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveKeyButtonActionPerformed
        // TODO(mitap94): Dodaj requestFocus() kada bude greska
        // Dodaj JOptionPane na vise mesta
        // NISU SVA POLJA OBAVEZNA

        // can't continue if extensions not saved
        if (extensionsPopup.isShowing()) {
            JOptionPane.showMessageDialog(extensionsPopup, Errors.SAVE_EXTENSIONS);
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.SAVE_EXTENSIONS);
            return;
        }

        if (keyContainer.getKeys() == null) {
            JOptionPane.showMessageDialog(this, Errors.NO_KEYS_GENERATED);
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_KEYS_GENERATED);
            return;
        }

        String serialNumber = serialNumberTextField.getText();
        if (serialNumber.trim().isEmpty()) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_SERIAL_NUMBER_SPECIFIED);
            return;
        }

        BigInteger serialNumberInt;
        try {
            serialNumberInt = new BigInteger(serialNumber);
        } catch (NumberFormatException e) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.INVALID_NUMBER_FORMAT + " "
                    + Errors.INVALID_SERIAL_NUMBER_FORMAT);
            return;
        }

        String dateNotBeforeString = dateNotBeforeTextField.getText();
        if (dateNotBeforeString.trim().isEmpty()) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_DATE_SPECIFIED);
            return;
        }

        String dateNotAfterString = dateNotAfterTextField.getText();
        if (dateNotAfterString.trim().isEmpty()) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_DATE_SPECIFIED);
            return;
        }

        String commonName = commonNameTextField.getText();
        /*
        if (commonName.trim().isEmpty()) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_COMMON_NAME_SPECIFIED);
            return;
        }*/

        String organizationName = organizationNameTextField.getText();
        /*
        if (organizationName.trim().isEmpty()) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_ORGANIZATION_NAME_SPECIFIED);
            return;
        }*/

        String organizationalUnitName = organizationalUnitNameTextField.getText();
        /*
        if (organizationalUnitName.trim().isEmpty()) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_ORGANIZATIONAL_UNIT_NAME_SPECIFIED);
            return;
        }*/

        String country = countryTextField.getText();
        /*
        if (country.trim().isEmpty()) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_COUNTRY_SPECIFIED);
            return;
        }*/

        String state = stateTextField.getText();
        /*
        if (state.trim().isEmpty()) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_STATE_SPECIFIED);
            return;
        }*/

        String locality = localityTextField.getText();
        /*
        if (locality.trim().isEmpty()) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_LOCALITY_SPECIFIED);
            return;
        }*/

        String email = emailTextField.getText();
        /*
        if (email.trim().isEmpty()) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.NO_EMAIL_SPECIFIED);
            return;
        }*/

        if (!email.trim().isEmpty()) {
            Pattern validEmailRegex = Pattern.compile(EMAIL_REGEXP, Pattern.CASE_INSENSITIVE);
            Matcher matcher = validEmailRegex.matcher(email);
            if (!matcher.find()) {
                statusBarTextField.setForeground(Errors.COLOR);
                statusBarTextField.setText(Errors.INVALID_EMAIL_ADDRESS);
                return;
            }
        }

        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);
        Date dateNotBefore = null;
        Date dateNotAfter = null;

        try {
            dateNotBefore = dateFormat.parse(dateNotBeforeString);
            dateNotAfter = dateFormat.parse(dateNotAfterString);
        } catch (ParseException e) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.INVALID_DATE_FORMAT);
            return;
        }

        long dateDifference = dateNotAfter.getTime() - dateNotBefore.getTime();
        if (dateDifference < 0) {
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.INVALID_DATE_ORDER);
            return;
        }

        String password = new String(passwordField.getPassword());
        if (password.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, Errors.NO_PASSWORD_SPECIFIED);
            setStatus(Errors.NO_PASSWORD_SPECIFIED, Errors.COLOR);
            return;
        }

        X509Builder builder = new BouncyCastleX509Builder();
        builder.setValidTimeframeStart(dateNotBefore);
        builder.setValidTimeframeEnd(dateNotAfter);

        // initialize to empty string
        builder.setCommonName("");
        builder.setOrganizationalUnit("");
        builder.setOrganization("");
        builder.setLocality("");
        builder.setState("");
        builder.setCountryName("");
        builder.setEmail("");

        // set common name
        if (!commonName.trim().isEmpty()) {
            builder.setCommonName(commonName);
        }

        // set organizational unit name
        if (!organizationalUnitName.trim().isEmpty()) {
            builder.setOrganizationalUnit(organizationalUnitName);
        }

        // set organization name
        if (!organizationName.trim().isEmpty()) {
            builder.setOrganization(organizationName);
        }

        // set locality
        if (!locality.trim().isEmpty()) {
            builder.setLocality(locality);
        }

        // set state
        if (!state.trim().isEmpty()) {
            builder.setState(state);
        }

        // set country name
        if (!country.trim().isEmpty()) {
            builder.setCountryName(country);
        }

        // set email
        if (!email.trim().isEmpty()) {
            builder.setEmail(email);
        }

        // set serial number
        builder.setSerialNumber(serialNumberInt);

        // set extensions
        // Basic Constraints
        if (extensions.extensions[0]) {
            BasicConstraints basicConstraints = null;
            if (extensions.basicConstrCA) {
                try {
                    int depthOfChain = Integer.parseInt(extensions.basicConstrDepthOfCertChain);
                    basicConstraints = new BasicConstraints(depthOfChain);
                } catch (NumberFormatException e) {
                    // TODO(mitap94): Uhvati exception;
                    return;
                }
            } else {
                basicConstraints = new BasicConstraints(false);
            }

            Extension basicConstraintsExt = null;
            try {
                basicConstraintsExt = new Extension(Extension.basicConstraints, extensions.critical[0],
                        basicConstraints.getEncoded());
            } catch (IOException ex) {
                // TODO(mitap94): Uhvati exception
                return;
            }
            builder.addExtension(basicConstraintsExt);
        }

        // Key Usage
        if (extensions.extensions[1]) {
            int mask = 0;
            if (extensions.keyUsage[0]) {
                mask |= KeyUsage.digitalSignature;
            }
            if (extensions.keyUsage[1]) {
                mask |= KeyUsage.nonRepudiation;
            }
            if (extensions.keyUsage[2]) {
                mask |= KeyUsage.keyEncipherment;
            }
            if (extensions.keyUsage[3]) {
                mask |= KeyUsage.dataEncipherment;
            }
            if (extensions.keyUsage[4]) {
                mask |= KeyUsage.keyAgreement;
            }
            if (extensions.keyUsage[5]) {
                mask |= KeyUsage.keyCertSign;
            }
            if (extensions.keyUsage[6]) {
                mask |= KeyUsage.cRLSign;
            }
            if (extensions.keyUsage[7]) {
                mask |= KeyUsage.encipherOnly;
            }
            if (extensions.keyUsage[8]) {
                mask |= KeyUsage.decipherOnly;
            }
            // TODO(mitap94): Da li je potrebne provera ili se svakako setuje?
            if (mask != 0) {
                X509KeyUsage keyUsage = new X509KeyUsage(mask);
                Extension keyUsageExt = null;
                try {
                    keyUsageExt = new Extension(Extension.keyUsage, extensions.critical[1],
                            keyUsage.getEncoded());
                } catch (IOException ex) {
                    // TODO(mitap94): uhvati izuzetak
                    return;
                }
                builder.addExtension(keyUsageExt);
            }
        }

        // Issuer Alternative Names
        if (extensions.extensions[2]) {

        }

        // build certificate
        X509Certificate certificate = null;
        try {
            certificate = builder.build(keyContainer.getKeys().getPrivate(),
                    keyContainer.getKeys().getPublic());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, Errors.BUILD_ERROR);
            setStatus(Errors.BUILD_ERROR, Errors.COLOR);
            return;
        }

        // store certificate
        try {
            manager.storeKeyCertificate(keyContainer.getKeys().getPrivate(), certificate,
                    keyContainer.getKeyName(), password);
        } catch (KeyStoreException ex) {
            JOptionPane.showMessageDialog(this, Errors.CRITICAL_ERROR);
            exit(Errors.KEY_STORE_EXCEPTION);
        }

        // update certificate list
        updateList(keyContainer.getKeyName());

        // show success message
        JOptionPane.showMessageDialog(this, Messages.SUCCESSFUL_KEY_SAVE
                + keyContainer.getKeyName());

        // clear fields and objects
        String alias = keyContainer.getKeyName();
        clearForm();
        setStatus(Messages.SUCCESSFUL_KEY_SAVE + alias, Messages.COLOR);
    }//GEN-LAST:event_saveKeyButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        String alias = generatedKeysList.getSelectedValue();
        if (alias == null) {
            JOptionPane.showMessageDialog(this, Errors.NOTHING_SELECTED);
            setStatus(Errors.NOTHING_SELECTED, Errors.COLOR);
            return;
        }

        setStatus("", Messages.COLOR);

        ExportPopup exportPopup = new ExportPopup(this, alias);
        exportPopup.setVisible(true);

        this.setEnabled(false);
    }//GEN-LAST:event_exportButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        setStatus("", Messages.COLOR);

        ImportPopup importPopup = new ImportPopup(this);
        importPopup.setVisible(true);

        this.setEnabled(false);
    }//GEN-LAST:event_importButtonActionPerformed

    private void viewCertificateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCertificateButtonActionPerformed
        // get alias of the key pair
        String alias = generatedKeysList1.getSelectedValue();
        if (alias == null) {
            // TODO(mitap94): izbaci error
            return;
        }

        // get certificate
        try {
            certificateView = (X509Certificate) manager.getCertificateChain(alias)[0];
        } catch (KeyStoreException ex) {
            // TODO(mitap94): Uhvati exception
            return;
        }

        // get private key
        String password = new String(passwordFieldViewCertificate.getPassword());
        passwordFieldViewCertificate.setText("");

        PrivateKey privateKey = null;
        try {
            privateKey = manager.getPrivateKey(alias, password);
        } catch (KeyStoreException ex) {
            // TODO(mitap94): Uhvati exception
            return;
        } catch (NoSuchAlgorithmException ex) {
            // TODO(mitap94): Uhvati exception
            return;
        } catch (UnrecoverableKeyException ex) {
            // TODO(mitap94): Uhvati exception
            return;
        }

        // generate CSR
        try {
            csrRequest = X509SelfSignedToCsr.convert(certificateView, privateKey);
        } catch (OperatorCreationException ex) {
            // TODO(mitap94): Uhvati exception
            return;
        }

        // set fields
        serialNumberTextFieldSign.setText(certificateView.getSerialNumber().toString());
        dateNotBeforeTextFieldSign.setText(certificateView.getNotBefore().toString());
        dateNotAfterTextFieldSign.setText(certificateView.getNotAfter().toString());

        X500Name x500name;
        try {
            x500name = new JcaX509CertificateHolder(certificateView).getSubject();
        } catch (CertificateEncodingException ex) {
            // TODO(): Uhvati exception
            return;
        }

        subjectCommonNameTextField.setText(IETFUtils.valueToString(x500name
                .getRDNs(BCStyle.CN)[0].getFirst().getValue()));
        subjectOrganizationalUnitNameTextField.setText(IETFUtils.valueToString(x500name
                .getRDNs(BCStyle.OU)[0].getFirst().getValue()));
        subjectOrganizationNameTextField.setText(IETFUtils.valueToString(x500name
                .getRDNs(BCStyle.O)[0].getFirst().getValue()));
        subjectEmailTextField.setText(IETFUtils.valueToString(x500name
                .getRDNs(BCStyle.E)[0].getFirst().getValue()));
        subjectCountryTextField.setText(IETFUtils.valueToString(x500name
                .getRDNs(BCStyle.C)[0].getFirst().getValue()));
        subjectStateTextField.setText(IETFUtils.valueToString(x500name
                .getRDNs(BCStyle.ST)[0].getFirst().getValue()));
        subjectLocalityTextField.setText(IETFUtils.valueToString(x500name
                .getRDNs(BCStyle.L)[0].getFirst().getValue()));

        publicKeyAlgorithmTextField.setText(certificateView.getPublicKey().getAlgorithm());

        RSAPublicKey publicKey = (RSAPublicKey) certificateView.getPublicKey();
        String length = "" + publicKey.getModulus().bitLength();
        keyLengthTextField.setText(length);

        viewCSRButton.setEnabled(true);

        if (certificateUse != null) {
            try {
                signedCertificate = X509Signer.sign(csrRequest, certificateUse,
                        certificateUsePrivateKey, certificateView.getSerialNumber(),
                        certificateView.getNotBefore(), certificateView.getNotAfter());
            } catch (IOException ex) {
                // TODO(mitap94): Uhvati exception
                return;
            } catch (OperatorCreationException ex) {
                // TODO(mitap94): Uhvati exception
                return;
            } catch (CertificateException ex) {
                // TODO(mitap94): Uhvati exception
                return;
            }
            signButton.setEnabled(true);
            previewCertificateButton.setEnabled(true);
            previewEncodedCertificateButton.setEnabled(true);
            viewSignatureButton.setEnabled(true);
            viewModulusButton.setEnabled(true);
            viewExtensionsButton.setEnabled(true);
        }
    }//GEN-LAST:event_viewCertificateButtonActionPerformed

    private void extensionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extensionsButtonActionPerformed
        if (!extensionsPopup.isShowing()) {
            extensionsPopup = new ExtensionsPopup(this, extensions);
            extensionsPopup.setVisible(true);
        }
    }//GEN-LAST:event_extensionsButtonActionPerformed

    private void signButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signButtonActionPerformed
        // TODO(mitap94): Save signed certificate
        // ***razvrstaj signed i unsigned po listama

        // clear certificates
        certificateView = null;
        certificateUse = null;
        csrRequest = null;
        signedCertificate = null;
        certificateUsePrivateKey = null;

        // clear fields
        
        
        // disable buttons
        previewCertificateButton.setEnabled(false);
        previewEncodedCertificateButton.setEnabled(false);
        viewCSRButton.setEnabled(false);
        signButton.setEnabled(false);
        viewSignatureButton.setEnabled(false);
        viewModulusButton.setEnabled(false);
        viewExtensionsButton.setEnabled(false);
    }//GEN-LAST:event_signButtonActionPerformed

    private void viewCSRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCSRButtonActionPerformed
        StringWriter stringWriter = new StringWriter();
        JcaPEMWriter jcaWriter = new JcaPEMWriter(stringWriter);
        try {
            jcaWriter.writeObject(csrRequest);
            jcaWriter.close();
        } catch (IOException ex) {

        }
        String message = stringWriter.toString();

        JTextArea textArea = new JTextArea(message);
        textArea.setEditable(false);
        GuiUtil.attachPopupMenu(textArea);
        JOptionPane.showMessageDialog(this, textArea, "CSR", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_viewCSRButtonActionPerformed

    private void useCertificateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useCertificateButtonActionPerformed
        // get alias of the key pair
        String alias = generatedKeysList1.getSelectedValue();
        if (alias == null) {
            // TODO(mitap94): izbaci error
            return;
        }

        // get certificate
        try {
            certificateUse = (X509Certificate) manager.getCertificateChain(alias)[0];
        } catch (KeyStoreException ex) {
            // TODO(mitap94): Uhvati exception
            return;
        }

        // get private key
        String password = new String(passwordFieldUseCertificate.getPassword());
        passwordFieldUseCertificate.setText("");

        try {
            certificateUsePrivateKey = manager.getPrivateKey(alias, password);
        } catch (KeyStoreException ex) {
            // TODO(mitap94): Uhvati exception
            return;
        } catch (NoSuchAlgorithmException ex) {
            // TODO(mitap94): Uhvati exception
            return;
        } catch (UnrecoverableKeyException ex) {
            // TODO(mitap94): Uhvati exception
            return;
        }

        // set fields
        X500Name x500name;
        try {
            x500name = new JcaX509CertificateHolder(certificateUse).getSubject();
        } catch (CertificateEncodingException ex) {
            // TODO(): Uhvati exception
            return;
        }

        issuerCommonNameTextField.setText(IETFUtils.valueToString(x500name
                .getRDNs(BCStyle.CN)[0].getFirst().getValue()));
        issuerOrganizationalUnitNameTextField.setText(IETFUtils.valueToString(x500name
                .getRDNs(BCStyle.OU)[0].getFirst().getValue()));
        issuerOrganizationNameTextField.setText(IETFUtils.valueToString(x500name
                .getRDNs(BCStyle.O)[0].getFirst().getValue()));
        issuerEmailTextField.setText(IETFUtils.valueToString(x500name
                .getRDNs(BCStyle.E)[0].getFirst().getValue()));
        issuerCountryTextField.setText(IETFUtils.valueToString(x500name
                .getRDNs(BCStyle.C)[0].getFirst().getValue()));
        issuerStateTextField.setText(IETFUtils.valueToString(x500name
                .getRDNs(BCStyle.ST)[0].getFirst().getValue()));
        issuerLocalityTextField.setText(IETFUtils.valueToString(x500name
                .getRDNs(BCStyle.L)[0].getFirst().getValue()));

        signatureAlgorithmTextField.setText(certificateUse.getSigAlgName());

        if (certificateView != null) {
            try {
                signedCertificate = X509Signer.sign(csrRequest, certificateUse,
                        certificateUsePrivateKey, certificateView.getSerialNumber(),
                        certificateView.getNotBefore(), certificateView.getNotAfter());
            } catch (IOException ex) {
                // TODO(mitap94): Uhvati exception
                return;
            } catch (OperatorCreationException ex) {
                // TODO(mitap94): Uhvati exception
                return;
            } catch (CertificateException ex) {
                // TODO(mitap94): Uhvati exception
                return;
            }

            signButton.setEnabled(true);
            previewCertificateButton.setEnabled(true);
            previewEncodedCertificateButton.setEnabled(true);
            viewSignatureButton.setEnabled(true);
            viewModulusButton.setEnabled(true);
            viewExtensionsButton.setEnabled(true);
        }
    }//GEN-LAST:event_useCertificateButtonActionPerformed

    private void previewCertificateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewCertificateButtonActionPerformed
        JTextArea textArea = new JTextArea(signedCertificate.toString());
        textArea.setEditable(false);
        textArea.setColumns(45);
        textArea.setWrapStyleWord(true);
        textArea.setLineWrap(true);
        JScrollPane scrollPane = new JScrollPane(textArea);
        GuiUtil.attachPopupMenu(textArea);
        JOptionPane.showMessageDialog(this, scrollPane, "Certificate", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_previewCertificateButtonActionPerformed

    private void previewEncodedCertificateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewEncodedCertificateButtonActionPerformed
        StringWriter stringWriter = new StringWriter();
        JcaPEMWriter jcaWriter = new JcaPEMWriter(stringWriter);
        try {
            jcaWriter.writeObject(signedCertificate);
            jcaWriter.close();
        } catch (IOException ex) {
            // TODO(mitap94): Uhvati exception
            return;
        }
        String message = stringWriter.toString();

        JTextArea textArea = new JTextArea(message);
        textArea.setEditable(false);
        GuiUtil.attachPopupMenu(textArea);
        JOptionPane.showMessageDialog(this, textArea, "Encoded Certificate", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_previewEncodedCertificateButtonActionPerformed

    private void viewSignatureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSignatureButtonActionPerformed
        byte[] signature = signedCertificate.getSignature();
        StringBuilder stringBuilder = new StringBuilder();
        for (byte val: signature) {
            stringBuilder.append(String.format("%02x", val));
        }
        JTextArea textArea = new JTextArea(stringBuilder.toString());
        textArea.setEditable(false);
        textArea.setColumns(45);
        textArea.setRows(15);
        textArea.setWrapStyleWord(true);
        textArea.setLineWrap(true);
        JScrollPane scrollPane = new JScrollPane(textArea);
        GuiUtil.attachPopupMenu(textArea);
        JOptionPane.showMessageDialog(this, scrollPane, "Signature", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_viewSignatureButtonActionPerformed

    private void viewModulusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewModulusButtonActionPerformed
        RSAPublicKey publicKey = (RSAPublicKey)signedCertificate.getPublicKey();
        JTextArea textArea = new JTextArea(publicKey.getModulus().toString());
        textArea.setEditable(false);
        textArea.setColumns(45);
        textArea.setRows(15);
        textArea.setWrapStyleWord(true);
        textArea.setLineWrap(true);
        JScrollPane scrollPane = new JScrollPane(textArea);
        GuiUtil.attachPopupMenu(textArea);
        JOptionPane.showMessageDialog(this, scrollPane, "Modulus", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_viewModulusButtonActionPerformed

    private void viewExtensionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewExtensionsButtonActionPerformed
        // signedCertificate.get
        JTextArea textArea = new JTextArea();
        textArea.setEditable(false);
        textArea.setColumns(45);
        textArea.setRows(15);
        textArea.setWrapStyleWord(true);
        textArea.setLineWrap(true);
        JScrollPane scrollPane = new JScrollPane(textArea);
        GuiUtil.attachPopupMenu(textArea);
        JOptionPane.showMessageDialog(this, scrollPane, "Extensions", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_viewExtensionsButtonActionPerformed

    private void myInitComponents() {
        screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frameSize = this.getSize();
        leftCornerAnchor = new Point((int) (screenSize.width / 2 - frameSize.width / 2),
                (int) (screenSize.height / 2 - frameSize.height / 2));
        setLocation(leftCornerAnchor);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);

        extensions = new Extensions();
        extensionsPopup = new ExtensionsPopup(this, extensions);

        certificateView = null;
        certificateUse = null;
        csrRequest = null;
        signedCertificate = null;
        certificateUsePrivateKey = null;

        keyContainer = new KeyContainer();

        GuiUtil.attachPopupMenuSpecial(publicKeyTextField, keyContainer, 0);
        GuiUtil.attachPopupMenuSpecial(privateKeyTextField, keyContainer, 1);
        GuiUtil.attachPopupMenu(keyNameTextField);
        GuiUtil.attachPopupMenu(keySizeTextField);
        GuiUtil.attachPopupMenu(dateNotAfterTextField);
        GuiUtil.attachPopupMenu(dateNotBeforeTextField);
        GuiUtil.attachPopupMenu(serialNumberTextField);
        GuiUtil.attachPopupMenu(commonNameTextField);
        GuiUtil.attachPopupMenu(organizationNameTextField);
        GuiUtil.attachPopupMenu(organizationalUnitNameTextField);
        GuiUtil.attachPopupMenu(emailTextField);
        GuiUtil.attachPopupMenu(countryTextField);
        GuiUtil.attachPopupMenu(stateTextField);
        GuiUtil.attachPopupMenu(localityTextField);

        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                try {
                    manager.saveStore();
                } catch (KeyStoreException ex) {
                    JOptionPane.showMessageDialog(null, Errors.KEY_STORE_NOT_LOADED + "\n"
                            + Errors.CANNOT_SAVE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, Errors.CANNOT_SAVE);
                } catch (NoSuchAlgorithmException ex) {
                    JOptionPane.showMessageDialog(null, Errors.CRITICAL_ERROR);
                } catch (CertificateException ex) {
                    JOptionPane.showMessageDialog(null, Errors.CERTIFICATE_CORRUPTION);
                }
            }
        });
    }

    private void initializeList() {
        try {
            certificates = manager.getCerts();
        } catch (KeyStoreException ex) {
            JOptionPane.showMessageDialog(this, Errors.CANT_LOAD_CERTIFICATES);
            statusBarTextField.setForeground(Errors.COLOR);
            statusBarTextField.setText(Errors.CANT_LOAD_CERTIFICATES);
            return;
        }
        listModel = new DefaultListModel();
        for (; certificates.hasMoreElements();) {
            listModel.addElement(certificates.nextElement());
        }
        generatedKeysList.setModel(listModel);
        generatedKeysList1.setModel(listModel);
    }

    public void updateList(String alias) {
        listModel.addElement(alias);
        generatedKeysList.setSelectedValue(alias, true);
    }

    // Clear the main form
    private void clearForm() {
        // reset key container
        keyContainer.setKeyName("");
        keyContainer.setKeySize(0);
        keyContainer.setKeys(null);

        // clear main text field
        keyNameTextField.setText("");
        keySizeTextField.setText("");
        publicKeyTextField.setText("");
        privateKeyTextField.setText("");
        dateNotBeforeTextField.setText("");
        dateNotAfterTextField.setText("");
        serialNumberTextField.setText("");
        commonNameTextField.setText("");
        organizationNameTextField.setText("");
        organizationalUnitNameTextField.setText("");
        emailTextField.setText("");
        countryTextField.setText("");
        stateTextField.setText("");
        localityTextField.setText("");
        passwordField.setText("");

        // clear extensions
        extensions.clearAll();

        if (extensionsPopup.isShowing()) {
            extensionsPopup.dispose();
        }
    }

    private final String EMAIL_REGEXP = "^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$";
    private final String DATE_FORMAT = "dd/MM/yyyy hh:mm:ss";

    X509Certificate certificateUse;
    PrivateKey certificateUsePrivateKey;

    X509Certificate certificateView;
    PKCS10CertificationRequest csrRequest;
    X509Certificate signedCertificate;

    Enumeration<String> certificates;
    DefaultListModel<String> listModel;

    ExtensionsPopup extensionsPopup;
    Extensions extensions;

    private Dimension screenSize;
    private Dimension frameSize;
    private Point leftCornerAnchor;

    final CertManager manager;
    private KeyContainer keyContainer;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel certificateGenerationTab;
    private javax.swing.JPanel certificateSigningTab;
    private javax.swing.JLabel certificateVersionLabel;
    private javax.swing.JLabel certificateVersionLabel1;
    private javax.swing.JLabel certificateVersionLabel2;
    private javax.swing.JLabel certificateVersionLabel3;
    private javax.swing.JLabel certificateViewLabel;
    private javax.swing.JPanel certificateViewPanel;
    private javax.swing.JButton clearFormButton;
    private javax.swing.JLabel commonNameLabel;
    private javax.swing.JLabel commonNameLabel1;
    private javax.swing.JLabel commonNameLabel2;
    private javax.swing.JTextField commonNameTextField;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JLabel countryLabel1;
    private javax.swing.JLabel countryLabel2;
    private javax.swing.JTextField countryTextField;
    private javax.swing.JLabel dateFormatLabel;
    private javax.swing.JLabel dateFormatLabel1;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel dateLabel1;
    private javax.swing.JLabel dateNotAfterLabel;
    private javax.swing.JLabel dateNotAfterLabel1;
    private javax.swing.JFormattedTextField dateNotAfterTextField;
    private javax.swing.JFormattedTextField dateNotAfterTextFieldSign;
    private javax.swing.JLabel dateNotBeforeLabel;
    private javax.swing.JLabel dateNotBeforeLabel1;
    private javax.swing.JFormattedTextField dateNotBeforeTextField;
    private javax.swing.JFormattedTextField dateNotBeforeTextFieldSign;
    private javax.swing.JPanel datePanel;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel emailLabel1;
    private javax.swing.JLabel emailLabel2;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton extensionsButton;
    private javax.swing.JButton generateKeysButton;
    private javax.swing.JLabel generatedKeysLabel;
    private javax.swing.JLabel generatedKeysLabel1;
    private javax.swing.JList<String> generatedKeysList;
    private javax.swing.JList<String> generatedKeysList1;
    private javax.swing.JScrollPane generatedKeysScrollPanel;
    private javax.swing.JScrollPane generatedKeysScrollPanel1;
    private javax.swing.JButton importButton;
    private javax.swing.JPanel importExportPanel;
    private javax.swing.JTextField issuerCommonNameTextField;
    private javax.swing.JTextField issuerCountryTextField;
    private javax.swing.JTextField issuerEmailTextField;
    private javax.swing.JLabel issuerLabel;
    private javax.swing.JTextField issuerLocalityTextField;
    private javax.swing.JTextField issuerOrganizationNameTextField;
    private javax.swing.JTextField issuerOrganizationalUnitNameTextField;
    private javax.swing.JTextField issuerStateTextField;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel keyGenerationLabel;
    private javax.swing.JPanel keyGenerationPanel;
    private javax.swing.JSeparator keyGenerationSeparator;
    private javax.swing.JSeparator keyGenerationSeparator1;
    private javax.swing.JSeparator keyGenerationSeparator2;
    private javax.swing.JSeparator keyGenerationSeparator3;
    private javax.swing.JSeparator keyGenerationSeparator4;
    private javax.swing.JSeparator keyGenerationSeparator5;
    private javax.swing.JSeparator keyGenerationSeparator6;
    private javax.swing.JLabel keyLengthLabel;
    private javax.swing.JTextField keyLengthTextField;
    private javax.swing.JLabel keyNameLabel;
    private javax.swing.JTextField keyNameTextField;
    private javax.swing.JLabel keySizeLabel;
    private javax.swing.JTextField keySizeTextField;
    private javax.swing.JLabel localityLabel;
    private javax.swing.JLabel localityLabel1;
    private javax.swing.JLabel localityLabel2;
    private javax.swing.JTextField localityTextField;
    private javax.swing.JLabel organizationNameLabel;
    private javax.swing.JLabel organizationNameLabel1;
    private javax.swing.JLabel organizationNameLabel2;
    private javax.swing.JTextField organizationNameTextField;
    private javax.swing.JLabel organizationalUnitNameLabel;
    private javax.swing.JLabel organizationalUnitNameLabel1;
    private javax.swing.JLabel organizationalUnitNameLabel2;
    private javax.swing.JTextField organizationalUnitNameTextField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JPasswordField passwordFieldUseCertificate;
    private javax.swing.JPasswordField passwordFieldViewCertificate;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel passwordUseCertificateLabel;
    private javax.swing.JLabel passwordViewCertificateLabel;
    private javax.swing.JButton previewCertificateButton;
    private javax.swing.JButton previewEncodedCertificateButton;
    private javax.swing.JLabel privateKeyLabel;
    private javax.swing.JTextField privateKeyTextField;
    private javax.swing.JLabel publicKeyAlgorithmLabel;
    private javax.swing.JTextField publicKeyAlgorithmTextField;
    private javax.swing.JLabel publicKeyLabel;
    private javax.swing.JTextField publicKeyTextField;
    private javax.swing.JButton saveKeyButton;
    private javax.swing.JLabel serialNumberLabel;
    private javax.swing.JLabel serialNumberLabel1;
    private javax.swing.JTextField serialNumberTextField;
    private javax.swing.JTextField serialNumberTextFieldSign;
    private javax.swing.JButton signButton;
    private javax.swing.JLabel signatureAlgorithmLabel;
    private javax.swing.JTextField signatureAlgorithmTextField;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JLabel stateLabel1;
    private javax.swing.JLabel stateLabel2;
    private javax.swing.JTextField stateTextField;
    private javax.swing.JTextField statusBarTextField;
    private javax.swing.JTextField subjectCommonNameTextField;
    private javax.swing.JTextField subjectCountryTextField;
    private javax.swing.JTextField subjectEmailTextField;
    private javax.swing.JLabel subjectLabel;
    private javax.swing.JTextField subjectLocalityTextField;
    private javax.swing.JTextField subjectOrganizationNameTextField;
    private javax.swing.JTextField subjectOrganizationalUnitNameTextField;
    private javax.swing.JTextField subjectStateTextField;
    private javax.swing.JTabbedPane tabsPanel;
    private javax.swing.JButton useCertificateButton;
    private javax.swing.JButton viewCSRButton;
    private javax.swing.JButton viewCertificateButton;
    private javax.swing.JButton viewExtensionsButton;
    private javax.swing.JButton viewModulusButton;
    private javax.swing.JButton viewSignatureButton;
    // End of variables declaration//GEN-END:variables
}
